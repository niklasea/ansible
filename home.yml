#!/usr/bin/env ansible-playbook
---
# TODO: Set up documentation (wiki.js or Bookstack?)
# TODO: Set up pull backups on orangepizero
# TODO: Static IP role
# TODO: Set up Syncthing
# TODO: Playbook for restoring backups
# TODO: Infrastucture provisioning (Terraform?)
# TODO: OpenSUSE Leap support
# TODO: Set up CI/CD (DroneCI?)
# TODO: Monitoring and alerts on everything
# TODO: Non-privileged LetsEncrypt implementation? (https://letsencrypt.org/docs/client-options/)
# TODO: nftables module
# TODO: Email server with SMTP relay (Mailgun/SendGrid)

- name: VyOS router config
  hosts: vyos
  roles:
    - vyos

- name: Common settings
  hosts: home
  roles:
    - common
    - role: firewall
      vars:
        firewall_policies:
          - { chain: INPUT, policy: DROP }
          - { chain: FORWARD, policy: DROP }
        firewall_rules:
          # Reject policy (ACCEPT policies for the chains, must be last rules in respective chain):
          #   -A INPUT -j REJECT --reject-with icmp-host-prohibited
          #   -A FORWARD -j REJECT --reject-with icmp-host-prohibited
          - { chain: INPUT, rule: ACCEPT, ctstate: [ ESTABLISHED, RELATED ] }
          - { chain: INPUT, rule: ACCEPT, in_interface: lo, comment: Localhost connections }
          # ICMP types and limit rules get added repeatedly on Debian
          # - { chain: INPUT, rule: ACCEPT, icmp_type: echo-request, proto: icmp, limit: 10/s, comment: Ping requests }
          # - { chain: INPUT, rule: ACCEPT, port: 22, proto: tcp, limit: 10/m, comment: SSH }
          - { chain: INPUT, rule: ACCEPT, proto: icmp, comment: Ping requests }
          - { chain: INPUT, rule: ACCEPT, port: 22, proto: tcp, comment: SSH }

# TODO: Use reverse proxy
- name: Install TP-Link Omada software controller
  hosts: omada
  tasks:
    - import_role:
        name: omada_controller

    - import_role:
        name: firewall
      vars:
        firewall_rules:
          # https://www.tp-link.com/us/support/faq/865/
          #   The Omada Controller does not seem to actually listen on port 27002.
          #   The MongoDB port should not be open to the network (the process only listens on localhost anyway).
          # Highly recommend using reverse proxy for TLS. Built-in web server uses weak encryption
          # and does not support user-configured HTTPS port nor user-configured TLS certificates.
          - { chain: INPUT, rule: ACCEPT, port: 8088, proto: tcp, comment: Omada web server HTTP }
          - { chain: INPUT, rule: ACCEPT, port: 8043, proto: tcp, comment: Omada web server HTTPS }
          - { chain: INPUT, rule: ACCEPT, port: 27001, proto: udp, comment: Omada controller discovery }
          - { chain: INPUT, rule: ACCEPT, port: 29810, proto: udp, comment: Omada EAP discovery }
          - { chain: INPUT, rule: ACCEPT, port: 29811, proto: tcp, comment: Omada EAP management }
          - { chain: INPUT, rule: ACCEPT, port: 29812, proto: tcp, comment: Omada EAP adoption }
          - { chain: INPUT, rule: ACCEPT, port: 29813, proto: tcp, comment: Omada EAP firmware upgrade }
  tags: omada

- import_playbook: dnsservers.yml
- import_playbook: vpnservers.yml
- import_playbook: webservers.yml
- import_playbook: dev_env.yml
- import_playbook: jellyfinservers.yml
# - import_playbook: bitwardenservers.yml
- import_playbook: retropie.yml
- import_playbook: gameservers.yml
