---
# TODO: Unattended install enables dhcpcd, but does not set static IP leading to conflict if this is the DHCP server
# TODO: Make SELinux policy or require the user to manually disable SELinux
# - name: OS-specific tasks
#   import_tasks: RedHat.yml
#   when: ansible_os_family == 'RedHat'
#   import_tasks: Debian.yml
#   when: ansible_os_family == 'Debian'

- name: Create directories
  become: true
  file:
    name: "{{ item }}"
    state: directory
  loop:
    - "{{ pihole_config_path }}"
    - "{{ pihole_config_path }}/migration_backup"
    - "{{ pihole_dnsmasq_config_path }}"
    - "{{ pihole_installer_path | dirname }}"

- name: Configure Pi-hole
  import_tasks: config.yml
  tags: update_config

- name: Download Pi-hole installer
  become: true
  get_url:
    # install.pi-hole.net causes SSL errors on Debian 9,
    # presumably due to issues with how the Python libraries handle CNAMEs.
    # Instead uses the url which install.pi-hole.net redirects to.
    url: 'https://raw.githubusercontent.com/pi-hole/pi-hole/master/automated%20install/basic-install.sh'
    dest: "{{ pihole_installer_path }}"
    mode: '755'
  register: pihole_install
  notify: Pi-hole repair

- block:
    - name: Move Pi-hole lists for first install
      become: true
      command:
        cmd: mv adlists.list regex.list blacklist.txt whitelist.txt ..
        chdir: "{{ pihole_config_path }}/migration_backup"
        removes: "{adlists, regex, blacklist, whitelist}.list"

    # This can fail if the host is already installing/updating packages
    # TODO: Gets stuck if SELinux is enabled
    - name: Install Pi-hole
      become: true
      command:
        argv:
          - "{{ pihole_installer_path }}"
          - --unattended
      environment:
        PIHOLE_SKIP_OS_CHECK: "true"
      register: pihole_installer_ran
      notify: Pi-hole config
  rescue:
    # The installer only runs if the installer file changes to avoid unnecessarily executing Pi-hole "gravity".
    # Remove the installer in case of failure to ensure that it will run next time.
    # TODO: Breaks the repair/reconfigure function if run on an existing Pi-hole installation.
    - name: Remove Pi-hole installer
      become: true
      file:
        path: "{{ pihole_installer_path }}"
        state: absent
    - name: Fail Pi-hole installer
      fail:
        msg: "Installer failed, cleaned up files"
  when: pihole_install is changed

- name: Schedule automatic updates for Pi-hole
  become: true
  cron:
    user: root
    name: 'Update Pi-hole'
    job: '/usr/local/bin/pihole -up'
    special_time: 'weekly'
    state: "{{ 'present' if pihole_automatic_updates else 'absent' }}"
