## vaultwarden Environment File
## This file contains the defaults for vaultwarden.
## Any options set via the admin page are saved in DATA_FOLDER/config.json and will override this file.
## See the latest template at: https://github.com/dani-garcia/vaultwarden/blob/master/.env.template
## or try the wiki for further info: https://github.com/dani-garcia/vaultwarden/wiki

## Main data folder
DATA_FOLDER={{ vaultwarden_data_folder }}

## Database URL
## When using SQLite, this is the path to the DB file, default to %DATA_FOLDER%/db.sqlite3
## When using MySQL, this it is the URL to the DB, including username and password:
## Format: mysql://[user[:password]@]host/database_name
DATABASE_URL={{ vaultwarden_database_url }}

## Individual folders, these override %DATA_FOLDER%
RSA_KEY_FILENAME={{ vaultwarden_rsa_key_file }}
ICON_CACHE_FOLDER={{ vaultwarden_cache_folder }}
ATTACHMENTS_FOLDER={{ vaultwarden_attachments_folder }}

## Templates data folder, by default uses embedded templates
## Check source code to see the format
{% if vaultwarden_templates_folder is defined %}
TEMPLATES_FOLDER={{ vaultwarden_templates_folder }}
{% endif %}
## Automatically reload the templates for every request, slow, use only for development
RELOAD_TEMPLATES={{ vaultwarden_reload_templates }}

## Client IP Header, used to identify the IP of the client, defaults to "X-Client-IP"
## Set to the string "none" (without quotes), to disable any headers and just use the remote IP
IP_HEADER={{ vaultwarden_ip_header }}

## Cache time-to-live for successfully obtained icons, in seconds (0 is "forever")
ICON_CACHE_TTL={{ vaultwarden_icon_cache_ttl }}
## Cache time-to-live for icons which weren't available, in seconds (0 is "forever")
ICON_CACHE_NEGTTL={{ vaultwarden_icon_cache_negttl }}

## Web vault settings
WEB_VAULT_FOLDER={{ vaultwarden_web_vault_folder }}
WEB_VAULT_ENABLED={{ vaultwarden_web_vault_enabled }}

## Enables websocket notifications
WEBSOCKET_ENABLED={{ vaultwarden_websocket_enabled }}

## Controls the WebSocket server address and port
WEBSOCKET_ADDRESS={{ vaultwarden_websocket_address }}
WEBSOCKET_PORT={{ vaultwarden_websocket_port }}

## Enable extended logging
## This shows timestamps and allows logging to file and to syslog
### To enable logging to file, use the LOG_FILE env variable
### To enable syslog, use the USE_SYSLOG env variable
EXTENDED_LOGGING={{ vaultwarden_extended_logging }}

## Logging to file
## It's recommended to also set 'ROCKET_CLI_COLORS=off'
LOG_FILE={{ vaultwarden_log_file }}

## Logging to Syslog
## This requires extended logging
## It's recommended to also set 'ROCKET_CLI_COLORS=off'
USE_SYSLOG={{ vaultwarden_use_syslog }}

## Log level
## Change the verbosity of the log output
## Valid values are "trace", "debug", "info", "warn", "error" and "off"
## Setting it to "trace" or "debug" would also show logs for mounted
## routes and static file, websocket and alive requests
LOG_LEVEL={{ vaultwarden_log_level }}

## Enable WAL for the DB
## Set to false to avoid enabling WAL during startup.
## Note that if the DB already has WAL enabled, you will also need to disable WAL in the DB,
## this setting only prevents vaultwarden from automatically enabling it on start.
## Please read project wiki page about this setting first before changing the value as it can
## cause performance degradation or might render  the service unable to start.
ENABLE_DB_WAL={{ vaultwarden_enable_db_wal }}

## Disable icon downloading
## Set to true to disable icon downloading, this would still serve icons from $ICON_CACHE_FOLDER,
## but it won't produce any external network request. Needs to set $ICON_CACHE_TTL to 0,
## otherwise it will delete them and they won't be downloaded again.
DISABLE_ICON_DOWNLOAD={{ vaultwarden_disable_icon_download }}

## Icon download timeout
## Configure the timeout value when downloading the favicons.
## The default is 10 seconds, but this could be to low on slower network connections
ICON_DOWNLOAD_TIMEOUT={{ vaultwarden_icon_download_timeout }}

## Icon blacklist Regex
## Any domains or IPs that match this regex won't be fetched by the icon service.
## Useful to hide other servers in the local network. Check the WIKI for more details
{% if vaultwarden_icon_blacklist_regex is defined %}
ICON_BLACKLIST_REGEX={{ vaultwarden_icon_blacklist_regex }}
{% endif %}

## Any IP which is not defined as a global IP will be blacklisted.
## Usefull to secure your internal environment: See https://en.wikipedia.org/wiki/Reserved_IP_addresses for a list of IPs which it will block
ICON_BLACKLIST_NON_GLOBAL_IPS={{ vaultwarden_icon_blacklist_non_global_ips }}

## Disable 2FA remember
## Enabling this would force the users to use a second factor to login every time.
## Note that the checkbox would still be present, but ignored.
DISABLE_2FA_REMEMBER={{ vaultwarden_disable_2fa_remember }}

## Require new device emails
## When a user logs in an email is required to be sent.
## If sending the email fails the login attempt will fail.
REQUIRE_DEVICE_EMAIL={{ vaultwarden_require_device_email }}

## Controls if new users can register
SIGNUPS_ALLOWED={{ vaultwarden_signups_allowed }}

## Controls if new users need to verify their email address upon registration
## Note that setting this option to true prevents logins until the email address has been verified!
## The welcome email will include a verification link, and login attempts will periodically
## trigger another verification email to be sent.
SIGNUPS_VERIFY={{ vaultwarden_signups_verify }}

## If SIGNUPS_VERIFY is set to true, this limits how many seconds after the last time
## an email verification link has been sent another verification email will be sent
SIGNUPS_VERIFY_RESEND_TIME={{ vaultwarden_signups_verify_resend_time }}

## If SIGNUPS_VERIFY is set to true, this limits how many times an email verification
## email will be re-sent upon an attempted login.
SIGNUPS_VERIFY_RESEND_LIMIT={{ vaultwarden_signups_verify_resend_limit }}

## Controls if new users from a list of comma-separated domains can register
## even if SIGNUPS_ALLOWED is set to false
SIGNUPS_DOMAINS_WHITELIST={{ vaultwarden_signups_domains_whitelist }}

## Token for the admin interface, preferably use a long random string
## One option is to use 'openssl rand -base64 48'
## If not set, the admin panel is disabled
{% if vaultwarden_admin_token is defined %}
ADMIN_TOKEN={{ vaultwarden_admin_token }}
{% endif %}

## Enable this to bypass the admin panel security. This option is only
## meant to be used with the use of a separate auth layer in front
DISABLE_ADMIN_TOKEN=false

## Invitations org admins to invite users, even when signups are disabled
INVITATIONS_ALLOWED={{ vaultwarden_invitations_allowed }}

## Controls the PBBKDF password iterations to apply on the server
## The change only applies when the password is changed
PASSWORD_ITERATIONS={{ vaultwarden_password_iterations }}

## Whether password hint should be sent into the error response when the client request it
SHOW_PASSWORD_HINT={{ vaultwarden_show_password_hint }}

## Domain settings
## The domain must match the address from where you access the server
## It's recommended to configure this value, otherwise certain functionality might not work,
## like attachment downloads, email links and U2F.
## For U2F to work, the server must use HTTPS, you can use Let's Encrypt for free certs
DOMAIN={{ vaultwarden_domain }}

## Yubico (Yubikey) Settings
## Set your Client ID and Secret Key for Yubikey OTP
## You can generate it here: https://upgrade.yubico.com/getapikey/
## You can optionally specify a custom OTP server
{% if vaultwarden_yubico is defined %}
YUBICO_CLIENT_ID={{ vaultwarden_yubico.client_id }}
YUBICO_SECRET_KEY={{ vaultwarden_yubico.secret_key }}
{% if vaultwarden_yubico.server is defined %}
YUBICO_SERVER={{ vaultwarden_yubico.server }}
{% endif %}
{% endif %}

## Duo Settings
## You need to configure all options to enable global Duo support, otherwise users would need to configure it themselves
## Create an account and protect an application as mentioned in this link (only the first step, not the rest):
## https://help.bitwarden.com/article/setup-two-step-login-duo/#create-a-duo-security-account
## Then set the following options, based on the values obtained from the last step:
# DUO_IKEY=<Integration Key>
# DUO_SKEY=<Secret Key>
# DUO_HOST=<API Hostname>
## After that, you should be able to follow the rest of the guide linked above,
## ignoring the fields that ask for the values that you already configured beforehand.

## Authenticator Settings
## Disable authenticator time drifted codes to be valid.
## TOTP codes of the previous and next 30 seconds will be invalid
## 
## According to the RFC6238 (https://tools.ietf.org/html/rfc6238),
## we allow by default the TOTP code which was valid one step back and one in the future.
## This can however allow attackers to be a bit more lucky with there attempts because there are 3 valid codes.
## You can disable this, so that only the current TOTP Code is allowed.
## Keep in mind that when a sever drifts out of time, valid codes could be marked as invalid.
## In any case, if a code has been used it can not be used again, also codes which predates it will be invalid.
AUTHENTICATOR_DISABLE_TIME_DRIFT = {{ vaultwarden_authenticator_disable_time_drift }}

## Rocket specific settings, check Rocket documentation to learn more
ROCKET_ADDRESS="{{ vaultwarden_rocket_address }}"
ROCKET_PORT={{ vaultwarden_rocket_port }}
ROCKET_WORKERS={{ vaultwarden_workers }}
{% if vaultwarden_tls is defined %}
ROCKET_TLS={certs="{{ vaultwarden_tls.certs }}",key="{{ vaultwarden_tls.key }}"}
{% endif %}

## Mail specific settings, set SMTP_HOST and SMTP_FROM to enable the mail service.
## To make sure the email links are pointing to the correct host, set the DOMAIN variable.
## Note: if SMTP_USERNAME is specified, SMTP_PASSWORD is mandatory
{% if vaultwarden_smtp is defined %}
SMTP_HOST={{ vaultwarden_smtp.host }}
SMTP_FROM={{ vaultwarden_smtp.from }}
SMTP_FROM_NAME={{ vaultwarden_smtp_from_name }}
SMTP_PORT={{ vaultwarden_smtp_port }}
## Setting force_tls would force the use of an explicit TLS connection, instead of upgrading an insecure one with STARTTLS
SMTP_SECURITY={{ vaultwarden_smtp_security }}
{% if vaultwarden_smtp_credentials is defined %}
SMTP_USERNAME={{ vaultwarden_smtp_credentials.username }}
SMTP_PASSWORD={{ vaultwarden_smtp_credentials.password }}
{% endif %}
## Defaults for SSL is "Plain" and "Login" and nothing for non-ssl connections. Possible values: ["Plain", "Login", "Xoauth2"]
{% if vaultwarden_smtp_auth_mechanism is defined %}
SMTP_AUTH_MECHANISM="{{ vaultwarden_smtp_auth_mechanism }}"
{% endif %}
SMTP_TIMEOUT={{ vaultwarden_smtp_timeout }}
{% endif %}

{% if vaultwarden_hibp_api_key is defined %}
HIBP_API_KEY={{ vaultwarden_hibp_api_key }}
{% endif %}

{{ vaultwarden_env_custom }}

# vim: syntax=ini
