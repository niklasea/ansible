---
vyos_wan_interface: eth1
vyos_wan_upload_bandwidth: 45mbit
vyos_guest_network_address: "{{ guest_network_ipv4 | ansible.utils.ipaddr('1') }}"
vyos_users:
  - username: vyos
    ssh_public_key: AAAAC3NzaC1lZDI1NTE5AAAAII0R2wlTuIwLKiehwg/fk4JXwcWi9RDUpZUFVBKB7JzU
    ssh_public_key_type: ssh-ed25519
vyos_dns_addresses: "{{ dns_addresses }}"
vyos_local_domain: "{{ local_domain }}"
vyos_local_interfaces:
  - device: eth0
    name: NINO
    vlan: 10
    subnet: "{{ internal_network_ipv4 }}"
  - device: eth0
    name: GUEST
    vlan: 90
    subnet: "{{ guest_network_ipv4 }}"
    firewall_rules_ipv4:
      in: |
        set firewall name GUEST-IN-v4 default-action 'reject'
        set firewall name GUEST-IN-v4 enable-default-log
        set firewall name GUEST-IN-v4 rule 10 action 'accept'
        set firewall name GUEST-IN-v4 rule 10 state established 'enable'
        set firewall name GUEST-IN-v4 rule 10 state related 'enable'
        set firewall name GUEST-IN-v4 rule 11 action 'accept'
        set firewall name GUEST-IN-v4 rule 11 description 'Allow guests to use the internet'
        set firewall name GUEST-IN-v4 rule 11 destination group network-group '!LOCAL-NETWORKS'
        set firewall name GUEST-IN-v4 rule 11 protocol 'tcp_udp'
        set firewall name GUEST-IN-v4 rule 11 state new 'enable'
        set firewall name GUEST-IN-v4 rule 20 action 'accept'
        set firewall name GUEST-IN-v4 rule 20 description 'Allow ICMP for diagnostic purposes'
        set firewall name GUEST-IN-v4 rule 20 destination group network-group '!LOCAL-NETWORKS'
        set firewall name GUEST-IN-v4 rule 20 protocol 'icmp'
        set firewall name GUEST-IN-v4 rule 20 state new 'enable'
        set firewall name GUEST-IN-v4 rule 100 action 'accept'
        set firewall name GUEST-IN-v4 rule 100 description 'Allow guests to use local DNS servers'
        set firewall name GUEST-IN-v4 rule 100 destination group network-group 'LOCAL-DNS'
        set firewall name GUEST-IN-v4 rule 100 protocol 'tcp_udp'
        set firewall name GUEST-IN-v4 rule 100 state new 'enable'
      local: |
        set firewall name GUEST-LOCAL-v4 default-action 'reject'
        set firewall name GUEST-LOCAL-v4 enable-default-log
        set firewall name GUEST-LOCAL-v4 rule 10 action 'accept'
        set firewall name GUEST-LOCAL-v4 rule 10 state established 'enable'
        set firewall name GUEST-LOCAL-v4 rule 10 state related 'enable'
        set firewall name GUEST-LOCAL-v4 rule 20 action 'accept'
        set firewall name GUEST-LOCAL-v4 rule 20 icmp type-name 'echo-request'
        set firewall name GUEST-LOCAL-v4 rule 20 protocol 'icmp'
        set firewall name GUEST-LOCAL-v4 rule 100 action 'accept'
        set firewall name GUEST-LOCAL-v4 rule 100 description 'Allow guests to use local DNS service'
        set firewall name GUEST-LOCAL-v4 rule 100 destination port '53'
        set firewall name GUEST-LOCAL-v4 rule 100 protocol 'tcp_udp'
        set firewall name GUEST-LOCAL-v4 rule 100 state new 'enable'
        set firewall name GUEST-LOCAL-v4 rule 110 action 'accept'
        set firewall name GUEST-LOCAL-v4 rule 110 description 'Allow guests to use local NTP service'
        set firewall name GUEST-LOCAL-v4 rule 110 destination port '123'
        set firewall name GUEST-LOCAL-v4 rule 110 protocol 'udp'
        set firewall name GUEST-LOCAL-v4 rule 110 state new 'enable'
vyos_nat_destination_rules:
  - description: 'Port forward WireGuard'
    destination port: '51820'
    inbound-interface: "{{ vyos_wan_interface }}"
    protocol: 'udp'
    translation address: "{{ hosts.public.ipv4_address | ansible.utils.ipaddr('address') }}"
  # - description: 'NAT loopback Wireguard'
  #   destination address: '{{ wan_address_ipv4 }}'
  #   destination port: '51820'
  #   inbound-interface: "{{ vyos_lan_interface }}.10"
  #   protocol: 'udp'
  #   translation address: '{{ hosts.public.ipv4_address }}'
  - description: 'Port forward Jellyfin clients'
    destination port: '32400'
    inbound-interface: "{{ vyos_wan_interface }}"
    protocol: 'tcp'
    translation address: "{{ hosts.public.ipv4_address | ansible.utils.ipaddr('address') }}"
  # - description: 'NAT loopback Jellyfin'
  #   destination address: '{{ wan_address_ipv4 }}'
  #   destination port: '32400'
  #   inbound-interface: "{{ vyos_lan_interface }}.10"
  #   protocol: 'tcp'
  #   translation address: '{{ hosts.public.ipv4_address }}'
vyos_static_routes:
  - network: "{{ wireguard_network_ipv4 }}"
    gateway: "{{ wireguard_network_ipv4 | ansible.utils.ipaddr('1') | ansible.utils.ipaddr('address') }}"
